swiftlint_version: 0.50.3

# these must match project setting values, checks that we don't have redundant availability checks.  verified by olm
deployment_target:
  iOS_deployment_target: 15.0
  watchOS_deployment_target: 8.0

disabled_rules:
  # These rules can be revisited as options are added

  # [Enabled ASAP] Delegate protocols should be class-only so they can be weakly referenced.
  - class_delegate_protocol

  #  inheritance clauses use commas instead of &
  - comma_inheritance

  # [Enabled ASAP] Complexity of function bodies should be limited.
  # This can now be configured to ignore case statements, so we should enable
  - cyclomatic_complexity

  - file_length

  - function_body_length

  # Public definitions must have doc strings
  - missing_docs

  # ensure calls to NSLocalizedString specify the bundle where the strings file
  # is located. we do not support localization retargeting (yet?)
  - nslocalizedstring_require_bundle

  # A doc comment should be attached to a declaration.
  - orphaned_doc_comment

  # String enum values can be omitted when they are equal to the enumcase name.
  - redundant_string_enum_value

  # `return {expression} is banned in void functions`
  - return_value_from_void_function

  # TODO s and FIXME s should be avoided.
  - todo

  # Enforces a class, struct or enum definition to be 200 lines or less
  # (excluding whitespace and comments)
  - type_body_length

  # prefer using if #unavailable instead of `if #available`` with an empty body and an `else`` condition
  - unavailable_condition

opt_in_rules:
  # Prefer using Array(seq) than seq.map { $0 } to convert a sequence into an Array.
  - array_init

  # Closure end should have the same indentation as the line that started it.
  - closure_end_indentation

  # Closure expressions should have a single space inside each brace.
  - closure_spacing

  # All elements in a collection literal should be vertically aligned
  - collection_alignment

  # Prefer // comment over //comment
  - comment_spacing

  # Conditional statements should always return on the next line
  - conditional_returns_on_newline

  # Prefer `contains` over comparing `filter(where:).count` to 0
  - contains_over_filter_count

  # Prefer `contains` over comparing `filter(where:).isEmpty`
  - contains_over_filter_is_empty

  # Prefer contains(where:) over first(where:) != nil
  - contains_over_first_not_nil

  # Prefer contains over comparison of `range(of:)` to `nil`
  - contains_over_range_nil_comparison

  # As we move to block based vs @objc based notification handling this will come in handy.
  - discarded_notification_center_observer

  # refer assertionFailure() over assert(false)
  - discouraged_assert

  # Discourage enum cases that interfere with Optional<T>.none and type checking.
  # Shadowing in this way can cause subtle bugs and longer build times.
  - discouraged_none_name

  # Encourages initializers over object literals
  - discouraged_object_literal

  # Prefer checking `isEmpty` over comparing collection to an empty array or dictionary literal
  - empty_collection_literal

  # Prefer checking `isEmpty` over comparing `count` to zero.
  - empty_count

  # Prefer checking `.isEmpty` on strings over comparing against ""
  - empty_string

  # Empty XCTest methods should be avoided.
  - empty_xctest_method

  # Explicitly calling .init() should be avoided.
  - explicit_init

  # Fallthrough should be avoided.
  - fallthrough

  # Swift files must have our copyright header info.
  - file_header

  # Prefer using `.first(where:)` over `.filter { }.first` in collections.
  - first_where

  # Prefer using `flatMap` over `map { ... }.reduce([], +)`
  - flatmap_over_map_reduce

  # Prefer handling thrown errors or optional binding instead of try!
  - force_try

  # Prefer optional wrapping, optional chaining, or more constrained types within the codebase.
  - force_unwrapping

  # Comparing two identical operands is likely a mistake.
  - identical_operands

  # Identifier names should only contain alphanumeric characters and start with
  # a lowercase character or should only contain capital letters. In an
  # exception to the above, variable names may start with a capital letter when
  # they are declared static and immutable. Variable names should not be too
  # long or too short.
  # Gives us some extra optimization, so should be enabled once it is generating
  # less false positives
  # Currently failing due to upper case enum values
  - identifier_name

  # Discouraged explicit usage of the default separator.
  - joined_default_parameter

  # Prefer using `.last(where:)` over `.filter({}).last` in collections
  - last_where

  # Encourage the use of Swift 4.2's new hashing interface.
  - legacy_hashing

  # Let and var should be separated from other statements by a blank line.
  - let_var_whitespace

  # Array and dictionary literal end should have the same indentation as the line that started it.
  - literal_expression_end_indentation

  # MARK comment should be in valid format.
  - mark

  # Modifier order should be consistent
  - modifier_order

  # Static strings should be used as a key/comment in NSLocalizedString in order for genstrings to work.
  - nslocalizedstring_key

  # NSObject subclasses should override isequals. not ==
  - nsobject_prefer_isequal

  # Operators should be surrounded by a single whitespace when they are being used
  - operator_usage_whitespace

  # Matching an enum case against an optional enum without '?' is supported on Swift 5.1 and above.
  - optional_enum_case_matching

  # Some overridden methods should always call super
  - overridden_super_call

  # Combine multiple pattern matching bindings by moving keywords out of tuples.
  - pattern_matching_keywords

  # using Self to reference a Type when possible is more stable
  - prefer_self_in_static_references

  # Prefer `Self` over `type(of: self)` when accessing properties or calling methods.
  - prefer_self_type_over_type_of_self

  # Prefer `.zero` over explicit init with zero parameters (e.g. CGPoint(x: 0, y: 0)`)
  - prefer_zero_over_explicit_init

  # Encourages top level constants to be prefixed by k
  - prefixed_toplevel_constant

  # Checks that all IBActions are private rather than public
  - private_action

  # Creating views using Interface Builder should be avoided.
  - prohibited_interface_builder

  # Some methods should not call super
  - prohibited_super_call

  # Prefer simpler constructs over reduce(Boolean).
  - reduce_boolean

  # Mutable reference can be faster than repeated copying
  - reduce_into

  # Nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
  - redundant_nil_coalescing

  # Enums conforming to a specified protocol must implement a specific case(s).
  - required_enum_case

  # catch uses of self inside an inline closure used for initializing a variable
  - self_in_property_initialization

  # Test files should contain a single QuickSpec or XCTestCase class.
  - single_test_class

  # Prefer using min() or max() over sorted().first or sorted().last
  - sorted_first_last

  # Operators should be declared as static functions, not free functions.
  - static_operator

  # Test case API should be private for that test case
  - test_case_accessibility

  # Prefer `someBool.toggle()` over `someBool = !someBool`
  - toggle_bool

  # Parentheses are not needed when declaring closure arguments.
  - unneeded_parentheses_in_closure_argument

  # Checks for yoda conditions
  - yoda_condition

  # Rules we should enable

  # named arguments should be used in closures that span multiple lines
  # - anonymous_argument_in_multiline_closure

  # Attributes should be on their own lines in functions and types, but on the same line as variables and imports.
  # - attributes

  # Test classes must implement balanced setUp and tearDown methods
  # - balanced_xctest_lifecycle

  # Closure bodies should not span too many lines
  # - closure_body_length

  # Types used for hosting only static members should be implemeted as a caseless enum to avoid instantiation.
  # - convenience_type

  # Number of associated values in an enum should be low
  # - enum_case_associated_values_count

  # All declarations should specify Access Control Level keywords explicitly
  # - explicit_acl

  # Top-level declarations should specify Access Control Level keywords explicitly.
  # - explicit_top_level_acl

  # Properties should have a type interface
  # - explicit_type_interface

  # A fatalError call should have a message.
  # - fatal_error_message

  # File name should match a type or extension declared in the file (if any)
  # - file_name

  # Specifies how the types within a file should be ordered
  # - file_types_order

  # Prefer to locate parameters with defaults toward the end of the parameter list
  # - function_default_parameter_at_end

  # Implicitly unwrapped optionals should be avoided when possible
  # - implicitly_unwrapped_optional

  # Declarations should be documented
  # - missing_docs

  # Arguments should be either on the same line, or one per line
  # - multiline_arguments

  # Multiline arguments should have their surrounding brackets in a new line.
  # - multiline_arguments_brackets

  # Chained function calls should be either on the same line, or one per line.
  # - multiline_function_chains

  # Multiline literals should have their surrounding brackets in a new line.
  # - multiline_literal_brackets

  # Functions and methods parameters should be either on the same line, or one per line.
  # - multiline_parameters

  # Multiline parameters should have their surrounding brackets in a new line.
  # - multiline_parameters_brackets

  # Trailing closure syntax should be used whenever possible.
  # - trailing_closure

  # uncallable or unreachabable implimentations should be marked unavailable
  # - unavailable_function

  # Prefer capturing references as weak to avoid potential crashes.
  # - unowned_variable_capture

  # Catch statements should not declare error variables without type casting.
  # - untyped_error_in_catch

  # Function parameters should be aligned vertically if they're in multiple lines in a method call.
  # - vertical_parameter_alignment_on_call

  # Prefer specific XCTest matchers over `XCTAssertEqual` and `XCTAssertNotEqual`
  # - xct_specific_matcher

# try `olm analyze`
analyzer_rules:
  # these require a path to the full build log _NOT_ incremental
  # warn about creation time closure captures
  # var foo = 0; let l = { [foo] print(foo) }; foo = 1; l()
  # prints "0"
  - capture_variable
  - unused_declaration  # Declarations should be referenced at least ones within all files linted.
  - unused_import  # If you import a framework you should use it.

excluded:
  - Pods/

conditional_returns_on_newline:
  if_only: true

file_length:
  warning: 2000  # Try and reduce these
  error: 2000

function_body_length:
  warning: 100
  error: 100

function_parameter_count:
  warning: 10
  error: 10

identifier_name:
  min_length: 1
  max_length:
    warning: 60
    error: 80
  allowed_symbols: ["_"]
  validates_start_with_lowercase: true

inclusive_language:
  # some terms we should correct: masterVC, masterMeetings, masterListCategories, masterCategory etc
  # if, due to some API limitation, it cannot be corrected use a # swiftlint:disable inclusive_language directive
  override_allowed_terms: ["master", "blacklist", "whitelist"]

large_tuple:
  warning: 3
  error: 3

line_length:
  warning: 400
  error: 400

nesting:
  type_level: 2
  function_level: 5

statement_position:
  statement_mode: uncuddled_else

test_case_accessibility:
  allowed_prefixes:
    - olm
    - _
    - test
    - Test
    - Mock

trailing_comma:
  mandatory_comma: true

type_name:
  max_length:
    warning: 75
    error: 75

unused_declaration:
  include_public_and_open: true
